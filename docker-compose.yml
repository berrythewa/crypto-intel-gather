version: '3.8'

services:
  # Rust Backend (main service)
  crypto-intel-rust:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto-intel-rust
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
    ports:
      - "8080:8080"
      - "9090:9090"  # Metrics port
    volumes:
      - ./configs:/app/configs:ro
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Use external network to connect to your existing DB
    networks:
      - crypto-intel-network
    # Optional: depends on your DB container if it exists
    depends_on:
      - crypto-intel-timescaledb

  # External DB reference (your existing container)
  crypto-intel-timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: crypto-intel-timescaledb
    external: true  # This tells docker-compose this container is managed externally
    networks:
      - crypto-intel-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: crypto-intel-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - crypto-intel-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: crypto-intel-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - crypto-intel-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: crypto-intel-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - crypto-intel-network

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  crypto-intel-network:
    external: true  # Use your existing network from setup-db-sqlx.sh 